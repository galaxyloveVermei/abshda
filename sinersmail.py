import telebot
from telebot import types
import sqlite3
from datetime import datetime, timedelta
import requests
import certifi
from decimal import Decimal
import telebot
import requests
from bs4 import BeautifulSoup
import re 
bot_token = "7388880847:AAEZKcyZazOgoCydK3tfMpxUC4u3PsDcMC8"
Crypto_Pay_API_Token = "252897:AACv7Wi56fKGb3ik0SKvMWOay6a4IaVaNqs"

def generate_payment_link(payment_system, amount):
    api_url = "https://pay.crypt.bot/api/createInvoice"
    headers = {"Crypto-Pay-API-Token": Crypto_Pay_API_Token}
    data = {
        "asset": payment_system,
        "amount": float(amount)
    }

    response = requests.post(api_url, headers=headers, json=data)
    if response.status_code == 200:
        json_data = response.json()
        invoice = json_data.get("result")
        payment_link = invoice.get("pay_url")
        invoice_id = invoice.get("invoice_id")
        return payment_link, invoice_id
    else:
        return None, None

def get_invoice_status(invoice_id):
    api_url = f"https://pay.crypt.bot/api/getInvoices?invoice_ids={invoice_id}"
    headers = {"Crypto-Pay-API-Token": Crypto_Pay_API_Token}

    response = requests.get(api_url, headers=headers)
    if response.status_code == 200:
        json_data = response.json()
        if json_data.get("ok"):
            invoices = json_data.get("result")
            if invoices and 'items' in invoices and invoices['items']:
                status = invoices['items'][0]['status']
                payment_link = invoices['items'][0]['pay_url']
                amount = Decimal(invoices['items'][0]['amount'])
                return status, payment_link, amount

    return None, None, None

def get_exchange_rates():
    api_url = "https://pay.crypt.bot/api/getExchangeRates"
    headers = {"Crypto-Pay-API-Token": Crypto_Pay_API_Token}

    response = requests.get(api_url, headers=headers)
    if response.status_code == 200:
        json_data = response.json()
        if json_data.get("ok"):
            return json_data["result"]
    return []

def convert_to_crypto(amount, asset):
    rates = get_exchange_rates()
    rate = None
    for exchange_rate in rates:
        if exchange_rate["source"] == asset and exchange_rate["target"] == 'USD':
            rate = Decimal(str(exchange_rate["rate"]))
            break

    if rate is None:
        raise ValueError(f"‚òÑÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –¥–ª—è {asset}")

    amount = Decimal(str(amount))
    return amount / rate

bot = telebot.TeleBot('7388880847:AAEZKcyZazOgoCydK3tfMpxUC4u3PsDcMC8', parse_mode='HTML')
admin_id = 7162072206
log_chat_id = 7162072206

def start_cmd(message):
  register = check_user(message.chat.id)
  if not register:
    markup = types.InlineKeyboardMarkup()
    continue_button = types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                                                 callback_data='continue')
    markup.add(continue_button)
    with open('had.jpg', 'rb') as had:
      bot.send_photo(message.chat.id,
                     had,
                     '<b>‚òÑÔ∏è–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ SinersMail Bot!',
                     parse_mode='HTML',
                     reply_markup=markup)






def create_database():
  conn = sqlite3.connect('database.db')
  cursor = conn.cursor()

  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            user_id INTEGER UNIQUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

  cursor.execute('''
    CREATE TABLE IF NOT EXISTS subscriptions (
        user_id INTEGER PRIMARY KEY,
        expiration_date DATETIME
    );
    ''')

  conn.commit()
  conn.close()


create_database()




def add_subscription(user_id, expiration_date):
  conn = sqlite3.connect('database.db')
  cursor = conn.cursor()

  cursor.execute(
      "INSERT OR REPLACE INTO subscriptions (user_id, expiration_date) VALUES (?, ?)",
      (user_id, expiration_date))
  conn.commit()
  conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def check_subscription_status(user_id):
  conn = sqlite3.connect('database.db')
  cursor = conn.cursor()

  cursor.execute("SELECT expiration_date FROM subscriptions WHERE user_id=?",
                 (user_id, ))
  subscription = cursor.fetchone()

  if subscription:
    expiration_date = subscription[0]
    date = datetime.strptime(expiration_date, '%Y-%m-%d %H:%M:%S.%f')
    current_date = datetime.now()

    if current_date <= date:
      days_left = (date - current_date).days
      status = f"<b>‚òÑÔ∏è–£ –≤–∞—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n‚òÑÔ∏è–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π\n=============================\nüÜî ID: {user_id}\n=============================\n‚öôÔ∏è–ê–¥–º–∏–Ω: @platonov_scm \n‚ù§Ô∏è–ù–∞—à –∫–∞–Ω–∞–ª: @SinersMail \n‚ù§Ô∏è–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>"
    else:
      status = f"<b>‚òÑÔ∏è–£ –≤–∞—Å –∏—Å—Ç–µ–∫–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞.\n‚òÑÔ∏è\n=============================\nüÜî ID: {user_id}\n=============================\n‚öôÔ∏è–ê–¥–º–∏–Ω: @platonov_scm \n‚òÑÔ∏è–ù–∞—à –∫–∞–Ω–∞–ª: @SinersMail \n‚ù§Ô∏è–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è </b>"
  else:
    status = f"<b>‚òÑÔ∏è–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞.\n‚òÑÔ∏è\n=============================\nüÜî ID: {user_id}\n=============================\n‚öôÔ∏è–ê–¥–º–∏–Ω: @platonov_scm \n‚òÑÔ∏è–ù–∞—à –∫–∞–Ω–∞–ª: @SinersMail \n‚ù§Ô∏è–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è </b>"

  conn.close()
  return status


def check_subscription(user_id):
  conn = sqlite3.connect('database.db')
  cursor = conn.cursor()

  cursor.execute("SELECT expiration_date FROM subscriptions WHERE user_id=?",
                 (user_id, ))
  subscription = cursor.fetchone()
  conn.close()

  if subscription:
    expiration_date = subscription[0]
    date = datetime.strptime(expiration_date, '%Y-%m-%d %H:%M:%S.%f')
    current_date = datetime.now()

    if current_date <= date:
      return True
    else:
      return False
  else:
    return False


del_markup = types.InlineKeyboardMarkup(row_width=2)
del_button = types.InlineKeyboardButton("‚òÑÔ∏è–ù–∞–∑–∞–¥", callback_data="del")
del_markup.add(del_button)

back_markup = types.InlineKeyboardMarkup(row_width=2)
back_button = types.InlineKeyboardButton("‚òÑÔ∏è–ù–∞–∑–∞–¥", callback_data="del")
back_markup.add(back_button)


@bot.message_handler(commands=['admin'])
def admin_cmd(message):
  if message.chat.id == admin_id:
    markup = types.InlineKeyboardMarkup()
    send_sub = types.InlineKeyboardButton("‚òÑÔ∏è–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",callback_data='send_sub')
    send_message = types.InlineKeyboardButton("‚òÑÔ∏è–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",callback_data='send_message2')
    usercounts = types.InlineKeyboardButton("üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",callback_data='usercounts')

    markup.add(send_sub,send_message,usercounts)
    with open('had.jpg', 'rb') as had:
      bot.send_photo(chat_id=message.chat.id,
                     photo=had,
                     caption='<b>‚òÑÔ∏è–ê–¥–º–∏–Ω-–º–µ–Ω—é: </b>',
                     reply_markup=markup)
  else:
    with open('had.jpg', 'rb') as had:
      bot.send_photo(chat_id=message.chat.id,
                     photo=had,
                     caption='<b>‚ùå –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å.</b>')
      







@bot.message_handler(commands=['start'])
def home(message):
    start_cmd(message)

    user_id = message.from_user.id

    channel_id1 = -1002231663863

    user_status1 = bot.get_chat_member(channel_id1, user_id).status

    if (user_status1 in ["member", "administrator", "creator"]):
        if check_subscription(message.chat.id) == True:
            markup = types.InlineKeyboardMarkup(row_width=2)
            cabinet = types.InlineKeyboardButton("üé©–ü—Ä–æ—Ñ–∏–ª—å", callback_data='cabinet')
            send_mail = types.InlineKeyboardButton("‚úâÔ∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ", callback_data='send_mail')
            pars = types.InlineKeyboardButton("üîç–ø–∞—Ä—Å–µ—Ä –ø–æ—á—Ç", callback_data='parser_em')
            subb = types.InlineKeyboardButton("ü•º–ü–æ–¥–ø–∏—Å–∫–∞", callback_data='sub')
            markup.add( cabinet, send_mail,pars,subb)
            with open('had.jpg', 'rb') as had:
                bot.send_photo(
                    chat_id=message.chat.id,
                    photo=had,
                    caption='''<b>‚òÑÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:
                    üëã–Ω–∞—à –∫–∞–Ω–∞–ª - @sinersmail
                    ‚öôÔ∏è–∞–¥–º–∏–Ω - @platonov_scm
                    
                      </b>''',
                    reply_markup=markup)
        else:
            markup = types.InlineKeyboardMarkup()
            cabinet = types.InlineKeyboardButton("üé©–ü—Ä–æ—Ñ–∏–ª—å", callback_data='cabinet')
            subb = types.InlineKeyboardButton("ü•º–ü–æ–¥–ø–∏—Å–∫–∞", callback_data='sub')
            markup.add(cabinet,subb)
            with open('had.jpg', 'rb') as had:
                bot.send_photo(chat_id=message.chat.id,
                                photo=had,
                                caption='<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é </b>',
                                reply_markup=markup)
    else:
        url = types.InlineKeyboardMarkup(row_width=3)
        url_b = types.InlineKeyboardButton("‚òÑÔ∏èsinersmail", url=f"https://t.me/+tu9FoKV9mS43MDRi")
        url_c = types.InlineKeyboardButton("‚òÑÔ∏èamolzz1k", url=f"https://t.me/amolzz1k")

        url.add(url_b, url_c)

        bot.send_message(message.chat.id, "‚òÑÔ∏è–ß—Ç–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <b>—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</b> –±–æ—Ç–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <b>–ø–æ–¥–ø–∏—Å–∞–Ω—ã</b> –Ω–∞ <b>–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ</b> —Ä–µ—Å—É—Ä—Å—ã <b>–±–æ—Ç–∞</b>!\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ <b>–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ</b> –∫–æ–º–∞–Ω–¥—É /start –∑–∞–Ω–æ–≤–æ!", reply_markup=url, parse_mode='html')


@bot.callback_query_handler(func=lambda call: call.data == 'parser_em')
def parser_em(call):
    if call.data == 'parser_em':
      bot.send_message(call.message.chat.id,"‚òÑÔ∏è–¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—á—Ç –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ /parser")
   
   
@bot.message_handler(commands=['parser'])
def parser_email(message):
  bot.send_message(
      message.chat.id,
      "<b>‚òÑÔ∏è–§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—á—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n–ø—Ä–∏–º–µ—Ä: —Å—É–¥—ã –ö–∏–µ–≤\n–ø—Ä–∏–º–µ—Ä: —Å—É–¥—ã –°–∞—Ä–∞—Ç–æ–≤\n–ø—Ä–∏–º–µ—Ä: —Å—É–¥—ã –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—á—Ç—ã:</b>",
      parse_mode='HTML')

@bot.message_handler(func=lambda message: True)
def parser_email(message):
  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
  search_query = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
  # –§–æ—Ä–º–∏—Ä—É–µ–º URL-–∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Google
  url = f"https://www.google.com/search?q=–ø–æ—á—Ç—ã {search_query}"
  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ Google
  response = requests.get(url)
  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  page_content = response.text
  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
  soup = BeautifulSoup(page_content, 'html.parser')
  # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  text_nodes = soup.find_all(text=True)
  # –ò—â–µ–º –ø–æ—á—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
  email_pattern = r'[\w\.-]+@[\w\.-]+'
  email_addresses = re.findall(email_pattern, ' '.join(text_nodes))
  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—á—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞, —É–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ –¥–æ–º–µ–Ω–∞
  filtered_emails = [
      email.split('@')[0] + '@' + email.split('@')[-1].rstrip('.')
      for email in email_addresses if '.' in email.split('@')[-1]
  ]
  bot.send_message(
      message.chat.id,
      "<b>‚òÑÔ∏è–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:</b>\n" +
      "<pre>" + ','.join(filtered_emails) + "</pre>",
      parse_mode='HTML')

def check_user(user_id):
  conn = sqlite3.connect('database.db')
  cursor = conn.cursor()

  cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id, ))
  existing_user = cursor.fetchone()

  if existing_user:
    return True
  else:
    cursor.execute("INSERT INTO users (user_id) VALUES (?)", (user_id, ))
    conn.commit()
    send_log(
        f'<b>üîî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π <a href="tg://openmessage?user_id={user_id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>\bID: </b><code>{user_id}</code>')
  conn.close()
  return False

@bot.callback_query_handler(func=lambda call: call.data == 'sub')
def cabinet(call):
    user_id = call.message.chat.id
    status = check_subscription_status(user_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí∏ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription"))
    markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="home"))
    bot.edit_message_caption(chat_id=user_id, message_id=call.message.message_id, caption=status, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'cabinet')
def cabinet(call):
    user_id = call.message.chat.id
    status = check_subscription_status(user_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=" home"))
    bot.edit_message_caption(chat_id=user_id, message_id=call.message.message_id, caption=status, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'buy_subscription')
def buy_subscription(call):
    markup = types.InlineKeyboardMarkup()
    subscription_options = [
        ("‚òÑÔ∏è15 –¥–Ω–µ–π - 0.5$", "buy_15"),
        ("‚òÑÔ∏è1 –º–µ—Å—è—Ü - 1$", "buy_30"),
        ("‚òÑÔ∏è2 –º–µ—Å—è—Ü–∞ - 2$", "buy_60"),
        ("‚òÑÔ∏è3 –º–µ—Å—è—Ü–∞ - 3$", "buy_90"),
        ("‚òÑÔ∏èLifetime - 5$", "buy_lifetime") 
    ]
    for option_text, callback_data in subscription_options:
        markup.add(types.InlineKeyboardButton(option_text, callback_data=callback_data))
    bot.edit_message_caption("‚åõÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
def subscription_duration_selected(call):
    duration = call.data
    markup = types.InlineKeyboardMarkup()
    currency_options = [
        ("üíµ USDT", "currency_USDT_" + duration),
        ("üíé TON", "currency_TON_" + duration),
        ("ü™ô BTC", "currency_BTC_" + duration),
        ("üí∂ ETH", "currency_ETH_" + duration)
    ]
    for option_text, callback_data in currency_options:
        markup.add(types.InlineKeyboardButton(option_text, callback_data=callback_data))
    bot.edit_message_caption("üí∏–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('currency_'))
def currency_selected(call):
    parts = call.data.split('_')
    currency = parts[1]
    duration_parts = parts[2:]
    duration = "_".join(duration_parts)

    amount = get_amount_by_duration(duration.replace('buy_', ''))
    
    try:
        print(amount, currency)
        converted_amount = convert_to_crypto(amount, currency)
        payment_link, invoice_id = generate_payment_link(currency, converted_amount)
        if payment_link and invoice_id:
            markup = types.InlineKeyboardMarkup()
            check_payment_button = types.InlineKeyboardButton("üí∏–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{call.from_user.id}:{invoice_id}")
            markup.add(check_payment_button)
            
            bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                                  caption=f"üí∏–°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_link}", reply_markup=markup)
        else:
            bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                                  caption="‚ùå–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except ValueError as e:
        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                              caption=str(e))

def get_amount_by_duration(duration):
    prices = {
        '15': 0.5,
        '30': 1,
        '60': 2,
        '90': 3,
        'lifetime': 5
    }
    return prices.get(duration, 0)

@bot.callback_query_handler(func=lambda call: call.data.startswith('check_payment:'))
def check_payment(call):
    _, user_id_str, invoice_id_str = call.data.split(':')
    user_id = int(user_id_str)
    invoice_id = invoice_id_str

    if user_id == call.from_user.id:
        status, payment_link, amount = get_invoice_status(invoice_id)
        
        if status == "paid":
            duration_days = get_duration_by_amount(amount)
            expiration_date = datetime.now() + timedelta(days=duration_days)
            add_subscription(user_id, expiration_date)

            bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                                  caption="‚úÖ–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.")
        else:
            bot.answer_callback_query(call.id, "‚ùå–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    else:
        bot.answer_callback_query(call.id, "‚ùå–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç—É –æ–ø–ª–∞—Ç—É.", show_alert=True)

def get_duration_by_amount(amount):
    amount = round(amount, 2)
    if amount <= 0.5:
        return 7
    elif amount <= 1:
        return 15
    elif amount <= 2:
        return 30
    elif amount <= 4:
        return 60
    elif amount <= 6:
        return 90
    elif amount >= 25:
        return 365 * 99
    else:
        return 0

@bot.callback_query_handler(func=lambda call: True)
def handle_inline_button_click(call):
  user_id = call.message.chat.id
  if call.data == 'send_sub':
    bot.edit_message_caption(
        chat_id=user_id,
        message_id=call.message.id,
        caption='<b>‚úç–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª-–≤–æ –¥–Ω–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</b>')
    bot.register_next_step_handler(call.message, give_sub)
  elif call.data == 'my_sub':
    with open('had.jpg', 'rb') as had:
      bot.send_photo(user_id,
                     had,
                     check_subscription_status(user_id),
                     reply_markup=del_markup)
  elif call.data == 'del':
    home(call.message)
    bot.delete_message(call.message.chat.id, call.message.id)
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
  elif call.data == 'back':
    home(call.message)
    bot.delete_message(call.message.chat.id, call.message.id)
  elif call.data == 'send_mail':
    bot.edit_message_caption(chat_id=user_id,
                             message_id=call.message.id,
                             caption='<b>‚òÑÔ∏è–£–∫–∞–∂–∏ —Ç–µ–º—É –≤–∞—à–µ–≥–æ –ø–∏—Å—å–º–∞: </b>')
    bot.register_next_step_handler(call.message, sm, call.message.id)
  elif call.data == 'send_message2':
    sent_message = bot.reply_to(call.message, "‚òÑÔ∏è–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    bot.register_next_step_handler(sent_message, process_sent_message)
  elif call.data == 'usercounts':
    total_users, subscribed_users = get_user_counts()
    bot.reply_to(call.message, f'<b>üìä MistMail  statsüìä\nüìä–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\nüìä–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: {subscribed_users}</b>')



def get_user_counts():
    # Create a new connection and cursor within the function
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()

    # Get total user count
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]

    # Get subscribed user count
    cursor.execute('SELECT COUNT(*) FROM subscriptions')
    subscribed_users = cursor.fetchone()[0]

    # Close the connection
    conn.close()

    return total_users, subscribed_users

def sm(message, ms):
    if message.text:
        title = message.text
        bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=ms,
            caption='<b>‚òÑÔ∏è–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–∏—Å—å–º–∞: </b>')
        bot.register_next_step_handler(message, sm1, title, ms)
        bot.delete_message(message.chat.id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        bot.edit_message_caption(chat_id=message.chat.id,
                                 message_id=ms,
                                 caption='<b>‚ùå –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º.</b>')

def sm1(message, title, ms):
    if message.text:
        text = message.text
        bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=ms,
            caption=
            '<b>‚òÑÔ∏è–£–∫–∞–∂–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: \n–ø—Ä–∏–º–µ—Ä—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π \n- test@sinersmail.ru\n- test@gmail.ru \n- test@gmail.com \n- test@mvd.gov \n –¥–æ–º–µ–Ω—ã –ø–æ—á—Ç—ã –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ª—é–±—ã–µ –¥–∞–∂–µ @anime.ru \n(–ª—é–±–æ–π –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –∑–∞—Ö–æ—á–µ—Ç—Å—è)</b>'
        )
        bot.register_next_step_handler(message, sm2, title, text, ms)
        bot.delete_m
